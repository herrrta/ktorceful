{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ktorceful","text":"<p>Create class based routing for Ktor</p> <p>Avoid writing out functions and declaring routing verbs in dsl!</p> <pre><code>// Create your class based view to handle all your required HTTP methods\n@Resource(\"user\")\nclass UserRoute: Get, Post, Delete {\n    override suspend fun get(call: RoutingCall) {\n        // ...\n    }\n\n    override suspend fun post(call: RoutingCall) {\n        // ...\n    }\n\n    override suspend fun delete(call: RoutingCall) {\n        // ...\n    }\n}\n\n\nfun Application.module() {\n    install(Resources)\n    // ...\n\n    // Create routing using the included functions\n    createRoutes&lt;UserRoute&gt;()\n}\n</code></pre> <p>Any future changes to your route can all be done within your class!</p>"},{"location":"samples/","title":"Samples","text":"<p>Project implementing basic routing classes CRUD interface implementing entity routing</p>"},{"location":"setup/","title":"Setup","text":"<p>Add ktorceful-core dependency to your application</p> DependenciesVersion Catalog build.gradle.kts<pre><code>dependencies {\n    implementation(\"dev.herrrta.ktorceful:ktorceful-core:x.x.x\")\n\n    // OPTIONAL! if using authentication in ktor\n    implementation(\"dev.herrrta.ktorceful:ktorceful-auth:x.x.x\")\n}\n</code></pre> ../gradle/libs.versions.toml<pre><code>[versions]\nktorceful = \"x.x.x\"\n...\n\n[libraries]\nktorceful-core = { module = \"dev.herrrta.ktorceful:ktorceful-core\", version.ref = \"ktorceful\" }\n\n# OPTIONAL! if using authentication in ktor\nktorceful-auth = { module = \"dev.herrrta.ktorceful:ktorceful-auth\" }\n...\n</code></pre> build.gradle.kts<pre><code>dependencies {\n    implementation(libs.ktorceful.core)\n    implementation(libs.ktorceful.auth)\n}\n</code></pre>"},{"location":"annotation/","title":"Overview","text":"<p>You can use the Ktorceful annotation to automatically create ktor routing for your classes.</p> <p>To use the ktorceful annotation, you must install Ktor Resource plugin</p>"},{"location":"annotation/#example-class","title":"Example class","text":"<pre><code>@Ktorceful\n@Resource(\"/your-api\")\nclass YourAPI: Get, Post {\n    override fun get(call: RoutingCall) {\n        //...\n    }\n\n    override fun post(call: RoutingCall) {\n        //...\n    }\n}\n</code></pre>"},{"location":"annotation/#define-route","title":"Define route","text":"<pre><code>fun Application.module() {\n    install(Resources)\n\n    allKtorcefulRoutes() // You can call this once for all routes!\n\n    // Or if you need more control you can use the following format\n    // ktorceful{ClassName}Route() \n    ktorcefulYourAPIRoute()\n}\n</code></pre> <ol> <li>Automatically handles defining your route</li> </ol>"},{"location":"auth/","title":"Auth (WIP)","text":""},{"location":"core/","title":"Overview","text":"<p>To create a basic rest api you can implement any HTTP Method interfaces required for your api</p> <p>All ktor restful methods are available as interfaces.</p>"},{"location":"core/#example-class","title":"Example class","text":"<pre><code>@Resource(\"/your-api\")\nclass YourAPI: Get, Post {\n    override fun get(call: RoutingCall) {\n        //...\n    }\n\n    override fun post(call: RoutingCall) {\n        //...\n    }\n}\n</code></pre>"},{"location":"core/#define-route","title":"Define route","text":"<pre><code>fun Application.module() {\n    install(Resources)\n\n    createRoutes&lt;YourAPI&gt;() // (1)!\n}\n</code></pre> <ol> <li>Automatically handles defining your route</li> </ol>"},{"location":"dao/","title":"Overview","text":"<p>To create a basic rest api you can implement any of the entity interfaces required for your api</p> <p>Use the available interfaces to create a CRUD api for your entity</p>"},{"location":"dao/#example-classes","title":"Example classes","text":"<pre><code>abstract class APIRoute&lt;E: Any&gt; (\n    val parent: API = API() // (1)!\n): CreateEntity&lt;T&gt;, UpdateEntity&lt;T&gt; {\n    abstract val repo: BaseRepository\n\n    // write code to base\n}\n\n@Resource(\"user\")\nclass UserRoute: APIRoute&lt;User&gt;() {\n    val repo: UserRepository = UserRepository()\n    //...\n}\n</code></pre> <ol> <li>You can create a parent argument to define the base path for your API.</li> </ol>"},{"location":"dao/#define-route","title":"Define route","text":"<pre><code>fun Application.module() {\n    install(Resources)\n\n    createRoutes&lt;UserRoute, User&gt;() // (1)!\n}\n</code></pre> <ol> <li>Also handles some basic functionality with serialization using kotlinx</li> </ol>"},{"location":"dao/#url-pattern","title":"URL Pattern","text":"<p><code>createRoutes</code> creates the following URL patterns for your entity based on the interfaces implemented. Any prefix url can be added by adding a parent to your route!</p> URL Method Interface {entity}/ GET GetEntity POST CreateEntity {entity}/{pk}/ GET GetEntity PUT UpdateEntity DELETE DeleteEntity {entity}/{action}/ POST EntityAction"},{"location":"dao/actions/","title":"Actions","text":"<p>Implementing <code>EntityAction</code> allows you to create methods inside your route class that act as  separate endpoints.</p> <p>Actions all use the POST http method since it assumes you are passing in a list of entities to perform an action on.</p>"},{"location":"dao/actions/#defining-an-action","title":"Defining an action","text":"<p>An action must be annotated using the <code>Action</code> annotation class.</p> <p>Each action should have <code>(RoutingCall, List&lt;Entity&gt;)</code> as parameters.</p> <pre><code>@Resource(\"user\")\nclass UserRoute: APIRoute&lt;User&gt;() {\n    //...\n\n    @Action\n    private fun disable(call: RoutingCall, users: List&lt;User&gt;) { \n        users.forEach {\n            it.isActive = false\n        }\n    }\n\n    @Action\n    private fun activate(call: RoutingCall, users: List&lt;User&gt;) {\n        users.forEach {\n            it.isActive = true\n        }\n    }\n}\n</code></pre>"},{"location":"dao/actions/#calling-an-action","title":"Calling an action","text":"<p>To call an action you can use the following url pattern:</p> <ul> <li><code>POST: {entity}/{action}/</code></li> </ul> <p>In the user example above we can use the following urls:</p> <ul> <li><code>POST: user/disable/</code></li> <li><code>POST: user/activate/</code></li> </ul>"}]}